
There has been around 20-25 hrs of development time to build this applicaton. It was based on the skeleton VS core ASP
service using VS2022

Once built, should be possible to launch in usual way from VS

Note that the cache used within this application can be configures with setttings in appsettings.json

  "NewsCache": {
    "TopNewsExpireSeconds": 20,
    "NewsStoryExpireSeconds": 80,
    "CullFrequency": 5
  }

  The first call made when resolving top ranked score stories is to fetch the list of IDs.  This cache
  is currently configured to expire at a faster rate than the stories resolved from it.  Hence new IDs will be
  resolved and added into the story cache which expires at 4 x age by default. Over time old stories will
  expire and at all times all stories making up the top score will be cached however some may be out of date
  until they also expire and are re-fetched.

  This is done to limit the number of calls made to the Hacker API - there is a deep discussion to be made
  on how such a cache is best implemented and indeed the integrity of the data as one may find a cache story receives
  a lot of comments whilst cached which would mean its score is not reflected when invoking the service.  However,
  given an upper limit on how long an item lives in the cache means this would eventually resolve.
  
  a very simple cache implementation is used AgedCache see Services/Cache

  There are 2 REST apis

  HackerApi
  ---------

  This is a simple wrapper around the Hacker API returning the raw data as returned by their API - this allows 
  the service to be visualised.  Note that the service is also using the cache so repeatedly pressing the Swagger
  Execute button will fetch caches results and eventually go back and fetch from Hacker API.

  The first top call returns a JSON list of IDs, one of these can be copied onto the second call which takes that
  ID and returns the story it belongs too.  Note that theses stories are all cached based on json settings.

    GET
    /HackerApi

    GET
    /HackerApi/{id}


  HackerTopNews
  -------------

    This is main service making use of above to resolve the top N ranked by score stories based on RankedNewsStory definition shown 
    below.  Note this service is using the above described caches and hence is not aware from where the data is being sourced
    - if the execute button is pressed, after the expiry period the rankings are re-resolved and re-ordered.

    GET
    /HackerTopNews/{n}


    public class RankedNewsStory
    {
        public RankedNewsStory(HackerNewStory hackerNewStory)
        {
            Title = hackerNewStory.Title;
            Uri = hackerNewStory.Url;
            PostedBy = hackerNewStory.By;
            Time = DateTimeOffset.FromUnixTimeSeconds(hackerNewStory.Time).DateTime;
            Score = hackerNewStory.Score;
            CommentCount = hackerNewStory.Kids.Count;
        }
        public string Title { get; }
        public string Uri { get; }
        public string PostedBy { get; }
        public DateTime Time { get; }
        public int Score { get; }
        public int CommentCount { get; }

        public override string ToString()
        {
            return $"RankedNewsStory Title = {Title}, Uri = {Uri}, PostedBy = {PostedBy}, Time = {Time}, Score = {Score}, CommentCount = {CommentCount}";
        }
    }

    Main classes of Note
    --------------------

    AppBuilder - set up the DI container with services for this application.
    AgedCache - used to cache ID fetches and stories based on an expiry time.
    ScoreRankedNews - to resolve and compute top N stories by score.
    HackerTopNewsController - the entry REST point for resolving stories.

    Unit Tests
    ----------

    There are some unit tests which can be run, these include a test time service so the time
    can be eplicitely set rather than using system time.  There is also a Moq using real life
    data of the Hacker API.  This is done with DI, see TestNews/Support/TestAppBuilder